pipeline {
    agent {
        node {
            label 'master'
        }
    }
    // triggers { upstream(upstreamProjects: 'jenkins_pipeline_example', threshold: hudson.model.Result.SUCCESS) }
    options {
        timestamps()
        disableConcurrentBuilds()
        timeout(time: 10, unit: 'SECONDS')
    }
    parameters {
        // Parallel Stage parameters
        booleanParam(name: 'RunParallelStage', defaultValue: false, description: 'Run Parallel Stage')
        string(name: 'SleepDelay', defaultValue: '3', description: 'Sleep delay inside timeout')
        string(name: 'shCmd', defaultValue: 'false', description: 'sh command to run')
        // Matrix Stage parameters
        booleanParam(name: 'RunMatrixStage', defaultValue: false, description: 'Run Matrix Stage')

        choice(name: 'choice', choices: ['one','two','three'], description: '')
        password(name: 'password', defaultValue: 'SECRET', description: '')
        text(name: 'text', defaultValue: 'One\nTwo\nThree\n', description: '')
    }
    stages {
       // --------------------------------------------------------------------
       stage("Parallel") {
            when {
                expression {return params.RunParallelStage}
            }
            failFast true
            parallel {
                stage("One") {
                    steps {
                        sleep 1
                        echo 'Stage 1'
                    }
                }
                stage("Two") {
                    options {
                        timeout(time: 2, unit: 'SECONDS')
                    }
                    steps {
                        // Use integer parameter
                        sleep params.SleepDelay.toInteger()
                        echo 'Stage 2'
                    }
                }
                stage("Three") {
                    options {
                        retry(2)
                    }
                    steps {
                        echo 'Stage 3'
                        sh "${params.shCmd}"
                    }
                }
            }
        }
        // --------------------------------------------------------------------
        stage("Matrix") {
            when {
                expression {return params.RunMatrixStage}
            }
            matrix {
                axes {
                    axis {
                        name 'PLATFORM'
                        values 'linux', 'mac', 'windows'
                    }
                }
                stages {
                    stage('One') {
                        steps {
                            echo "$PLATFORM - stage 1"
                        }
                    }
                    stage('Two') {
                        steps {
                            echo "$PLATFORM - stage 2"
                        }
                    }
                }
            }
        }
     }
}
